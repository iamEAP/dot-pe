{"version":3,"sources":["webpack:///./src/templates/blog-post.js"],"names":["BlogPostTemplate","render","post","this","props","data","markdownRemark","siteTitle","site","siteMetadata","title","prevNext","allMarkdownRemark","edges","filter","edge","node","fields","slug","pathContext","location","frontmatter","description","excerpt","img","baseUrl","thumbnail","childImageSharp","fluid","src","className","class","hideImage","alt","dangerouslySetInnerHTML","__html","html","style","borderTop","paddingRight","next","rel","to","date","previous","React","Component","pageQuery"],"mappings":"kOAOMA,E,gLACJC,OAAA,WAAU,IAAD,OACDC,EAAOC,KAAKC,MAAMC,KAAKC,eACvBC,EAAYJ,KAAKC,MAAMC,KAAKG,KAAKC,aAAaC,MAE9CC,EADWR,KAAKC,MAAMC,KAAKO,kBAAkBC,MACzBC,QAAO,SAAAC,GAC/B,OAAOA,EAAKC,KAAKC,OAAOC,OAAS,EAAKd,MAAMe,YAAYD,QACvD,GAEH,OACE,kBAAC,IAAD,CAAQE,SAAUjB,KAAKC,MAAMgB,SAAUV,MAAOH,GAC5C,kBAAC,IAAD,CACEG,MAAOR,EAAKmB,YAAYX,MACxBY,YAAapB,EAAKmB,YAAYC,aAAepB,EAAKqB,QAClDC,IAAG,GAAKrB,KAAKC,MAAMC,KAAKG,KAAKC,aAAagB,QAAUvB,EAAKmB,YAAYK,UAAUC,gBAAgBC,MAAMC,MAEvG,6BACEC,UAAS,iBAAkB5B,EAAKmB,YAAYK,WAAjB,aAE3B,4BAAQI,UAAU,uBAChB,wBAAIA,UAAU,sBAAsB5B,EAAKmB,YAAYX,QAGtDR,EAAKmB,YAAYC,aAChB,uBAAGS,MAAM,wBAAwB7B,EAAKmB,YAAYC,cAGlDpB,EAAKmB,YAAYW,WAAa9B,EAAKmB,YAAYK,WAC/C,yBAAKI,UAAU,sBACb,kBAAC,IAAD,CACEA,UAAU,WACVF,MAAO1B,EAAKmB,YAAYK,UAAUC,gBAAgBC,MAClDK,IAAK/B,EAAKmB,YAAYX,SAK5B,yBACEoB,UAAU,oBACVI,wBAAyB,CAAEC,OAAQjC,EAAKkC,QAG1C,wBAAIC,MAAO,CAACC,UAAW,uBAEvB,4BAAQR,UAAU,uBAChB,wBAAIA,UAAU,cAAcO,MAAO,CAACE,aAAc,IAChD,4BACG5B,EAAS6B,MACR,kBAAC,OAAD,CAAMC,IAAI,WAAWC,GAAI/B,EAAS6B,KAAKvB,OAAOC,KAAMY,UAAU,cAA9D,mBAA+FnB,EAAS6B,KAAKnB,YAAYsB,OAEzH,uBAAGb,UAAU,uBAAb,mCAGJ,4BACGnB,EAASiC,UACR,kBAAC,OAAD,CAAMH,IAAI,OAAOC,GAAI/B,EAASiC,SAAS3B,OAAOC,KAAMY,UAAU,cAA9D,aAAyFnB,EAASiC,SAASvB,YAAYsB,OAEvH,uBAAGb,UAAU,uBAAb,oC,GAzDae,IAAMC,WAwEtB9C,YAER,IAAM+C,EAAS","file":"component---src-templates-blog-post-js-cf3181c91b1abbe353ce.js","sourcesContent":["import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nclass BlogPostTemplate extends React.Component {\n  render() {\n    const post = this.props.data.markdownRemark\n    const siteTitle = this.props.data.site.siteMetadata.title\n    const allPosts = this.props.data.allMarkdownRemark.edges\n    const prevNext = allPosts.filter(edge => {\n      return edge.node.fields.slug === this.props.pathContext.slug;\n    })[0]\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO\n          title={post.frontmatter.title}\n          description={post.frontmatter.description || post.excerpt}\n          img={`${this.props.data.site.siteMetadata.baseUrl}${post.frontmatter.thumbnail.childImageSharp.fluid.src}`}\n        />\n        <article\n          className={`post-content ${post.frontmatter.thumbnail || `no-image`}`}\n        >\n          <header className=\"post-content-header\">\n            <h1 className=\"post-content-title\">{post.frontmatter.title}</h1>\n          </header>\n\n          {post.frontmatter.description && (\n            <p class=\"post-content-excerpt\">{post.frontmatter.description}</p>\n          )}\n\n          {!post.frontmatter.hideImage && post.frontmatter.thumbnail && (\n            <div className=\"post-content-image\">\n              <Img\n                className=\"kg-image\"\n                fluid={post.frontmatter.thumbnail.childImageSharp.fluid}\n                alt={post.frontmatter.title}\n              />\n            </div>\n          )}\n\n          <div\n            className=\"post-content-body\"\n            dangerouslySetInnerHTML={{ __html: post.html }}\n          />\n\n          <hr style={{borderTop: '1px solid #cfcfcf'}} />\n\n          <footer className=\"post-content-footer\">\n            <ul className=\"actions fit\" style={{paddingRight: 0}}>\n              <li>\n                {prevNext.next && (\n                  <Link rel=\"previous\" to={prevNext.next.fields.slug} className=\"button fit\">{`Fast-forward to ${prevNext.next.frontmatter.date}`}</Link>\n                ) || (\n                  <a className=\"button fit disabled\">There will probably be more...</a>\n                )}\n              </li>\n              <li>\n                {prevNext.previous && (\n                  <Link rel=\"next\" to={prevNext.previous.fields.slug} className=\"button fit\">{`Rewind to ${prevNext.previous.frontmatter.date}`}</Link>\n                ) || (\n                  <a className=\"button fit disabled\">There was probably more...</a>\n                )}\n              </li>\n            </ul>\n            {/* There are two options for how we display the byline/author-info.\n        If the post has more than one author, we load a specific template\n        from includes/byline-multiple.hbs, otherwise, we just use the\n        default byline. */}\n          </footer>\n        </article>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n        baseUrl\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        hideImage\n        thumbnail {\n          childImageSharp {\n            fluid(maxWidth: 1360) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n    allMarkdownRemark(sort: {fields: [frontmatter___date], order: ASC}) {\n      edges {\n        node {\n          frontmatter {\n            date\n            title\n          }\n          fields {\n            slug\n          }\n        }\n        previous {\n          frontmatter {\n            date(formatString: \"MMMM YYYY\")\n            title\n          }\n          fields {\n            slug\n          }\n        }\n        next {\n          frontmatter {\n            date(formatString: \"MMMM YYYY\")\n            title\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}